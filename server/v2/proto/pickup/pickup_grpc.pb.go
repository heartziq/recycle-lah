// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pickupv2

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PickupsClient is the client API for Pickups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PickupsClient interface {
	// Server streaming rpc
	ListPickups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Pickups_ListPickupsClient, error)
}

type pickupsClient struct {
	cc grpc.ClientConnInterface
}

func NewPickupsClient(cc grpc.ClientConnInterface) PickupsClient {
	return &pickupsClient{cc}
}

func (c *pickupsClient) ListPickups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Pickups_ListPickupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pickups_ServiceDesc.Streams[0], "/pickupv2.Pickups/ListPickups", opts...)
	if err != nil {
		return nil, err
	}
	x := &pickupsListPickupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pickups_ListPickupsClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type pickupsListPickupsClient struct {
	grpc.ClientStream
}

func (x *pickupsListPickupsClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PickupsServer is the server API for Pickups service.
// All implementations must embed UnimplementedPickupsServer
// for forward compatibility
type PickupsServer interface {
	// Server streaming rpc
	ListPickups(*emptypb.Empty, Pickups_ListPickupsServer) error
	mustEmbedUnimplementedPickupsServer()
}

// UnimplementedPickupsServer must be embedded to have forward compatible implementations.
type UnimplementedPickupsServer struct {
}

func (UnimplementedPickupsServer) ListPickups(*emptypb.Empty, Pickups_ListPickupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPickups not implemented")
}
func (UnimplementedPickupsServer) mustEmbedUnimplementedPickupsServer() {}

// UnsafePickupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PickupsServer will
// result in compilation errors.
type UnsafePickupsServer interface {
	mustEmbedUnimplementedPickupsServer()
}

func RegisterPickupsServer(s grpc.ServiceRegistrar, srv PickupsServer) {
	s.RegisterService(&Pickups_ServiceDesc, srv)
}

func _Pickups_ListPickups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PickupsServer).ListPickups(m, &pickupsListPickupsServer{stream})
}

type Pickups_ListPickupsServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type pickupsListPickupsServer struct {
	grpc.ServerStream
}

func (x *pickupsListPickupsServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

// Pickups_ServiceDesc is the grpc.ServiceDesc for Pickups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pickups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pickupv2.Pickups",
	HandlerType: (*PickupsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPickups",
			Handler:       _Pickups_ListPickups_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pickup.proto",
}
